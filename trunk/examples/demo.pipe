# This file contains examples for a quick start on SeqPipe.
#
# Version: ($Id$)
#
# For these quick demos, please try to run them yourself and
#  learn. Everytime after you type the bash shell command:
#     $ seqpipe -m demo.pipe demo_XXX
#  check files in .seqpipe/ directory. Following the steps,
#  it should be easy to grasp usage and spirit of SeqPipe.
#
# To run the real example (BWA pair-end read mapping), you
#  should change into the directory of this demo.pipe, and
#  also make sure 'bwa' have been installed correctly.
#
# Before running any test, you can directly run command:
#     $ seqpipe
#  to see version and help message, and then try:
#     $ seqpipe -D -m demo.pipe -l
#  to list all available procedures (from this demo.pipe).
#

############################################################
# Basic Usage
############################################################

# DEMO-001: Single line command
#
function demo_001
{
	echo "Hello, world!"
}
# As in bash, following function formats are all equivalent
function demo_001_a()
{
	echo "Hello, world!"
}
function demo_001_b( )
{
	echo "Hello, world!"
}
function demo_001_c( ) {
	echo "Hello, world!"
}
demo_001_d()
{
	echo "Hello, world!"
}
demo_001_e() {
	echo "Hello, world!"
}
demo_001_f() {{  # This '{{ ... }}' will be explained later
	echo "Hello, world!"
}}

# DEMO-002: Mulitple commands & multi-line command
#
function demo_002
{
	echo "Write to stderr" >/dev/stderr
	pwd; sleep 1; ls
	cat demo.pipe | grep function \
		| wc -l
}

# DEMO-003: Failure (non-zero return value) terminates pipeline
#
function demo_003
{
	wc demo.pipe; false
	echo "This command will never be run!"
}

# DEMO-004: Using bash conditional expression: '&&', '||'
#
function demo_004
{
	true && echo "This will be executed!"
	true || echo "This will not be executed!"
	false || echo "This works fine!"
}

# DEMO-005: Bash loop and conditional statements
#
function demo_005
{
	for c in {1..22} X Y M; do \
		if [ "$c" == "X" -o $c == "M" ]; then \
			echo "chr$c"; \
		fi; \
	done
}

############################################################
# A Real Exmaple
############################################################

# DEMO-006: BWA pair-end read mapping
#
function demo_006
{
	bwa index MT.fa
	bwa aln MT.fa r_1.fq.gz > r_1.fq.gz.sai
	bwa aln MT.fa r_2.fq.gz > r_2.fq.gz.sai
	bwa sampe MT.fa r_1.fq.gz.sai r_2.fq.gz.sai r_1.fq.gz r_2.fq.gz > out.sam
}

# DEMO-007: Running in parallel
#
# NOTE: Try to run in parallel (-t option):
#   $ seqpipe -m demo.pipe demo_007 -t 2
#
function demo_007
{
	bwa index MT.fa

	{{
		bwa aln MT.fa r_1.fq.gz > r_1.fq.gz.sai
		bwa aln MT.fa r_2.fq.gz > r_2.fq.gz.sai
	}}

	bwa sampe MT.fa r_1.fq.gz.sai r_2.fq.gz.sai r_1.fq.gz r_2.fq.gz > out.sam
}

# DEMO-008: Nested blocks - parallel vs. sequential
#
# NOTE: Try to run in different threads:
#   $ seqpipe -m demo.pipe demo_008 -t 3
# or
#   $ seqpipe -m demo.pipe demo_008 -t 4
#
function demo_008
{{
	echo a; sleep 3; echo b
	echo c; sleep 2; echo d
	{
		echo e
		sleep 1
		{{
			echo f; sleep 2; echo g
			echo h; sleep 1; echo i
		}}
	}
}}

# DEMO-009: Define require/input/output files
#
# NOTE: Try command:
#   $ seqpipe -m demo.pipe demo_009 -h
# or
#   $ seqpipe -m demo.pipe demo_009 -H
# Run pipeline:
#   $ seqpipe -m demo.pipe demo_009
# And try again with '-f':
#   $ seqpipe -m demo.pipe demo_009 -f
#
function demo_009
{
	#[input="MT.fa" output="MT.fa.bwt"]
	bwa index MT.fa

	{{
		#[require="MT.fa" require="MT.fa.bwt" input="r_1.fq.gz" output="r_1.fq.gz.sai"]
		bwa aln MT.fa r_1.fq.gz > r_1.fq.gz.sai
		#[require="MT.fa" require="MT.fa.bwt" input="r_2.fq.gz" output="r_2.fq.gz.sai"]
		bwa aln MT.fa r_2.fq.gz > r_2.fq.gz.sai
	}}

	#[require="MT.fa" require="MT.fa.bwt"]
	#[input="r_1.fq.gz" input="r_1.fq.gz.sai"]
	#[input="r_2.fq.gz" input="r_2.fq.gz.sai"]
	#[output="out.sam"]
	bwa sampe MT.fa r_1.fq.gz.sai r_2.fq.gz.sai r_1.fq.gz r_2.fq.gz > out.sam
}

# DEMO-010: Define 'output.temp' files
#
# NOTE: Try command:
#   $ seqpipe -m demo.pipe demo_010 -H
# Try:
#   $ seqpipe -m demo.pipe demo_010 -f
#   $ ls
# And try again with '-k':
#   $ seqpipe -m demo.pipe demo_010 -f -k
#   $ ls
#
function demo_010
{
	#[input="MT.fa" output="MT.fa.bwt"]
	bwa index MT.fa

	{{
		#[require="MT.fa" require="MT.fa.bwt" input="r_1.fq.gz" output.temp="r_1.fq.gz.sai"]
		bwa aln MT.fa r_1.fq.gz > r_1.fq.gz.sai
		#[require="MT.fa" require="MT.fa.bwt" input="r_2.fq.gz" output.temp="r_2.fq.gz.sai"]
		bwa aln MT.fa r_2.fq.gz > r_2.fq.gz.sai
	}}

	#[require="MT.fa" require="MT.fa.bwt"]
	#[input="r_1.fq.gz" input="r_1.fq.gz.sai"]
	#[input="r_2.fq.gz" input="r_2.fq.gz.sai"]
	#[output="out.sam"]
	bwa sampe MT.fa r_1.fq.gz.sai r_2.fq.gz.sai r_1.fq.gz r_2.fq.gz > out.sam
}

# DEMO-011: Use variables to make pipeline flexible
#
# NOTE: Try commands:
#   $ seqpipe -m demo.pipe demo_011 -h
#   $ seqpipe -m demo.pipe demo_011 -H REF=MT.fa
# And also try:
#   $ seqpipe -m demo.pipe demo_011 -T
#   $ seqpipe -m demo.pipe demo_011 -T REF=MT.fa
#   $ seqpipe -m demo.pipe demo_011 -T REF=MT.fa NAME=r OUTPUT=out
# And then try:
#   $ seqpipe -m demo.pipe demo_011 -f REF=MT.fa NAME=r OUTPUT=out
#
function demo_011
{
	#[input="${REF}" output="${REF}.bwt"]
	bwa index ${REF}

	{{
		#[require="${REF}" require="${REF}.bwt" input="${NAME}_1.fq.gz" output.temp="${NAME}_1.fq.gz.sai"]
		bwa aln ${REF} ${NAME}_1.fq.gz > ${NAME}_1.fq.gz.sai
		#[require="${REF}" require="${REF}.bwt" input="${NAME}_2.fq.gz" output.temp="${NAME}_2.fq.gz.sai"]
		bwa aln ${REF} ${NAME}_2.fq.gz > ${NAME}_2.fq.gz.sai
	}}

	#[require="${REF}" require="${REF}.bwt"]
	#[input="${NAME}_1.fq.gz" input="${NAME}_1.fq.gz.sai"]
	#[input="${NAME}_2.fq.gz" input="${NAME}_2.fq.gz.sai"]
	#[output="${OUTPUT}.sam"]
	bwa sampe ${REF} ${NAME}_1.fq.gz.sai ${NAME}_2.fq.gz.sai ${NAME}_1.fq.gz ${NAME}_2.fq.gz > ${OUTPUT}.sam
}

# DEMO-012: Define sub procedure
#
# NOTE: Try command:
#   $ seqpipe -m demo.pipe demo_012 REF=MT.fa NAME=r OUTPUT=out -f
# It will call 'bwa_index' subsequently
#
function demo_012
{
	SP_run _bwa_index REF=${REF}

	{{
		#[require="${REF}" require="${REF}.bwt" input="${NAME}_1.fq.gz" output.temp="${NAME}_1.fq.gz.sai"]
		bwa aln ${REF} ${NAME}_1.fq.gz > ${NAME}_1.fq.gz.sai
		#[require="${REF}" require="${REF}.bwt" input="${NAME}_2.fq.gz" output.temp="${NAME}_2.fq.gz.sai"]
		bwa aln ${REF} ${NAME}_2.fq.gz > ${NAME}_2.fq.gz.sai
	}}

	#[require="${REF}" require="${REF}.bwt"]
	#[input="${NAME}_1.fq.gz" input="${NAME}_1.fq.gz.sai"]
	#[input="${NAME}_2.fq.gz" input="${NAME}_2.fq.gz.sai"]
	#[output="${OUTPUT}.sam"]
	bwa sampe ${REF} ${NAME}_1.fq.gz.sai ${NAME}_2.fq.gz.sai ${NAME}_1.fq.gz ${NAME}_2.fq.gz > ${OUTPUT}.sam
}
function _bwa_index
{
	#[input="${REF}" output="${REF}.bwt"]
	bwa index ${REF}
}

# DEMO-013: Set default value of variables
#
# NOTE: Try command:
#   $ seqpipe -m demo.pipe demo_013 -H
# Now only 'NAME' is required to specify:
#   $ seqpipe -m demo.pipe demo_013 NAME=r -f
#
function demo_013
{
	SP_set REF=MT.fa
	SP_set OUTPUT=out

	SP_run _bwa_index REF=${REF}

	{{
		#[require="${REF}" require="${REF}.bwt" input="${NAME}_1.fq.gz" output.temp="${NAME}_1.fq.gz.sai"]
		bwa aln ${REF} ${NAME}_1.fq.gz > ${NAME}_1.fq.gz.sai
		#[require="${REF}" require="${REF}.bwt" input="${NAME}_2.fq.gz" output.temp="${NAME}_2.fq.gz.sai"]
		bwa aln ${REF} ${NAME}_2.fq.gz > ${NAME}_2.fq.gz.sai
	}}

	#[require="${REF}" require="${REF}.bwt"]
	#[input="${NAME}_1.fq.gz" input="${NAME}_1.fq.gz.sai"]
	#[input="${NAME}_2.fq.gz" input="${NAME}_2.fq.gz.sai"]
	#[output="${OUTPUT}.sam"]
	bwa sampe ${REF} ${NAME}_1.fq.gz.sai ${NAME}_2.fq.gz.sai ${NAME}_1.fq.gz ${NAME}_2.fq.gz > ${OUTPUT}.sam
}

# DEMO-014: Determine parameters automatically
#
# NOTE: Try:
#   $ seqpipe -m demo.pipe demo_014 NAME=r -f
# and check parameters of shell command 'bwa index'
#
function demo_014
{
	SP_set REF=MT.fa
	SP_set OUTPUT=out

	SP_run _bwa_index_ex REF=${REF}

	{{
		#[require="${REF}" require="${REF}.bwt" input="${NAME}_1.fq.gz" output.temp="${NAME}_1.fq.gz.sai"]
		bwa aln ${REF} ${NAME}_1.fq.gz > ${NAME}_1.fq.gz.sai
		#[require="${REF}" require="${REF}.bwt" input="${NAME}_2.fq.gz" output.temp="${NAME}_2.fq.gz.sai"]
		bwa aln ${REF} ${NAME}_2.fq.gz > ${NAME}_2.fq.gz.sai
	}}

	#[require="${REF}" require="${REF}.bwt"]
	#[input="${NAME}_1.fq.gz" input="${NAME}_1.fq.gz.sai"]
	#[input="${NAME}_2.fq.gz" input="${NAME}_2.fq.gz.sai"]
	#[output="${OUTPUT}.sam"]
	bwa sampe ${REF} ${NAME}_1.fq.gz.sai ${NAME}_2.fq.gz.sai ${NAME}_1.fq.gz ${NAME}_2.fq.gz > ${OUTPUT}.sam
}
function _bwa_index_ex
{
	SP_set _ALGORITHM="is"

	# Here we assume a genome is long if its file is bigger than 2Gb
	SP_if (test -n "$(ls -l ${REF} | awk '$5>=2e9')")
	{
		SP_set _ALGORITHM="bwtsw"
	}

	#[input="${REF}" output="${REF}.bwt"]
	bwa index -a ${_ALGORITHM} ${REF}
}
